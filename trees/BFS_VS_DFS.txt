A Tree is typically traversed in two ways:

1) Breadth Fist Search (BFS) or Level Order Traversal 
2) Depth First Search (DFS)


  A tree:    
        1 
      2   3
    4  5    


 BFS and DFSs of above Tree:

 Breadth First Traversal : 1 2 3 4 5

 Depth First Traversals: 
      Preorder Traversal : 1 2 4 5 3 
      Inorder Traversal  :  4 2 5 1 3 
      Postorder Traversal : 4 5 2 3 1 


<> Preorder		Root -> Left -> Right 
<> Inorder		Left -> Root -> Right
<> Postorder	Left -> Right -> Root           


Is there any difference in terms of Time Complexity?
 All four traversals require O(n) time as they visit every node exactly once.

Is there any difference in terms of Extra Space? 
 There is difference in terms of extra space required. 

Space Complexities of BFS AND DFS:
1) Extra Space required for Level Order Traversal is O(w) where w is maximum width of Binary Tree. In level order traversal, queue one by one stores nodes of different level.

2) Extra Space required for Depth First Traversals is O(h) where h is maximum height of Binary Tree. In Depth First Traversals, stack (or function call stack) stores all ancestors of a node.


Extra Points to Consider: 
* BFS starts visiting nodes from root, while DFS starts visiting nodes from leaves.

 So if our problem is to search something that is more likely to closer to root, we would prefer (BFS). And if the target node is close to a leaf, we would prefer (DFS).
